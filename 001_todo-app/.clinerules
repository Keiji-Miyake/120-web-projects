# TypeScript ToDo App Development Guidelines

## プロジェクト固有の規約

### 1. コードスタイル
- **TypeScriptの活用**
  - 厳格な型チェック (`strict: true`)
  - `interface` を優先的に使用
  - ユーティリティ型の活用
- **命名規則**
  - クラス: パスカルケース (例: `TodoApp`)
  - インターフェース: パスカルケース (例: `Todo`)
  - 変数・メソッド: キャメルケース (例: `addTodo`)
  - 定数: アッパースネークケース (例: `MAX_TODOS`)

### 2. アーキテクチャ
- **クラスベース設計**
  - 単一責任の原則を遵守
  - private/publicの適切な使用
  - メソッドは50行以内を目標
- **状態管理**
  - LocalStorageの活用
  - イミュータブルな状態更新
- **イベント処理**
  - イベントデリゲーションの活用
  - TypedEventの使用

### 3. テスト規約
- **テストファイル命名**
  - `*.test.ts` 形式
  - テスト対象と同じディレクトリに配置
- **テストカバレッジ**
  - ビジネスロジック: 90%以上
  - UI操作: 80%以上
- **テスト記述**
  - Arrange-Act-Assert パターン
  - 説明的なテスト名
  - モックの適切な使用

### 4. ドキュメント
- **コードコメント**
  - 複雑なロジックの説明
  - パブリックAPIのJSDoc
  - 型定義の説明
- **README管理**
  - セットアップ手順
  - 開発プロセス
  - デプロイ手順

### 5. パフォーマンス
- **DOM操作の最適化**
  - 不要な再レンダリングの防止
  - DocumentFragmentの使用
  - イベントリスナーの適切な管理
- **メモリ管理**
  - 適切なイベントリスナーの解除
  - 循環参照の防止
  - 大きなデータの適切な管理

### 6. セキュリティ
- **入力検証**
  - XSS対策
  - データサニタイズ
- **ストレージ**
  - 機密データの適切な管理
  - LocalStorageの使用制限

### 7. 品質管理
- **コードレビュー**
  - 型安全性の確認
  - パフォーマンスへの影響
  - テストの適切性
- **自動化**
  - ESLint/Prettier
  - ビルド時の型チェック
  - CIでのテスト実行

### 8. コミット管理
- **コミットメッセージ**
  - 日本語で記述
  - 変更内容を明確に
  - プレフィックスの使用（feat, fix等）
- **Pull Request**
  - 適切なサイズ（200行以内推奨）
  - 明確な変更説明
  - レビュー観点の明記

これらの規約は、プロジェクトの進行に応じて適宜更新します。